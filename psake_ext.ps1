# Returns true if the current directory resides within a git repository
function Get-In-Git-Repository {
  $checkIn = (Get-Item .)
  while ($checkIn -ne $null) {
    $pathToTest = $checkIn.fullname + '/.git'
    if ((Test-Path $pathToTest) -eq $true) {
      return $TRUE
    } else {
      $checkIn = $checkIn.parent
    }
  }
  
  return $false
}

# Returns if a given file exists on the system path
function Get-File-Exists-On-Path {	
    param([string]$file)	
    
    $results = ($Env:Path).Split(";") | Get-ChildItem -filter $file -erroraction silentlycontinue	
    $found = ($results -ne $null)	
    return $found
}

# Returns the current commit hash
function Get-Git-Commit 
{	
    if ((Get-File-Exists-On-Path "git.exe") -and (Get-In-Git-Repository)) 
    {		
        $gitLog = git log --oneline -1		
        return $gitLog.Split(' ')[0]	
    }	
    else 
    {		
        return "0000000"	
    }
}

function Get-Git-Tagged-Version
{
    $ErrorActionPreference = "SilentlyContinue"
    if ((Get-File-Exists-On-Path "git.exe") -and (Get-In-Git-Repository))
    {
        $gitDescribe = (git describe --tags --match "v[0-9].[0-9].[0-9]")
        if ($gitDescribe -ne $null)
        {
            $gitDescribe = $gitDescribe.Replace("-",".").Substring(1)
            return $gitDescribe.Substring(0,$gitDescribe.LastIndexOf("."))
        }
    }
    return "0.1.0.0"     
}

function Get-Base-Version 
{
    param([string]$Version)
    return $Version.Substring(0,$Version.LastIndexOf("."))
}

function Generate-Assembly-Info
{
    param(	
        [string]$ClsCompliant = "true",	
        [string]$Title, 	
        [string]$Description, 	
        [string]$Company, 	
        [string]$Product, 	
        [string]$File = $(throw "file is a required parameter.")
    )    
        
    $commit      = Get-Git-Commit
    $fileVersion = Get-Git-Tagged-Version
    $version     = Get-Base-Version($fileVersion) + ".0"
    $year        = Get-Date -Format "yyyy"
    
    Write-Host "Computed Assembly Version: $fileVersion-$commit"
    
    $asmInfo = "// <auto-generated>
// This file is automatically generated by a tool. Any changes made to the contents
// of this file may be lost when it is generated again. Please do not make any 
// changes to this file.
// </auto-generated>

using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: CLSCompliantAttribute($clsCompliant )]
[assembly: ComVisibleAttribute(false)]
[assembly: AssemblyTitleAttribute(""$title"")]
[assembly: AssemblyDescriptionAttribute(""$description"")]
[assembly: AssemblyCompanyAttribute(""$company"")]
[assembly: AssemblyProductAttribute(""$product"")]
[assembly: AssemblyCopyrightAttribute(""Copyright ©$year $company"")]
[assembly: AssemblyTrademarkAttribute(""All rights reserved"")]
[assembly: AssemblyVersionAttribute(""$version"")]
[assembly: AssemblyInformationalVersionAttribute(""$fileVersion-$commit"")]
[assembly: AssemblyFileVersionAttribute(""$fileVersion"")]
[assembly: AssemblyDelaySignAttribute(false)]"	

    $dir = [System.IO.Path]::GetDirectoryName($file)	
    if ([System.IO.Directory]::Exists($dir) -eq $false)	
    {		
        Write-Host "Creating directory $dir"		
        [System.IO.Directory]::CreateDirectory($dir)	
    }	
    Write-Host "Generating assembly info file: $file"	
    Write-Output $asmInfo > $file
}